package ca.utoronto.utm.paint;

import javax.swing.*;  
import java.awt.*;
import java.io.PrintWriter;
import java.util.ArrayList;

class PaintPanel extends JPanel {
	private static final long serialVersionUID = 3277442988868869424L;
	private ArrayList<PaintCommand> commands = new ArrayList<PaintCommand>();
	
	public PaintPanel(){
		this.setBackground(Color.white);
		this.setPreferredSize(new Dimension(300,300));
	}
	
	public void setCommands(ArrayList<PaintCommand> commands){
		this.commands=commands;
	}
	public void reset(){
		this.commands.clear();
		this.repaint();
	}
	
	public void addCommand(PaintCommand command){
		this.commands.add(command);
	}
	/**
	 * Save function that writes to a file with information about the shape in the format so the load 
	 * can accept the files generated by it.
	 * 
	 * @param writer
	 */
	public void save(PrintWriter writer){
		//the end and beginning print statements are required in each file, regardless of content, but will be ignored in load
		writer.println("Paint Save File Version 1.0");
		for (int shapeNum=0;shapeNum<this.commands.size();shapeNum++){
			Shape shape = this.commands.get(shapeNum).getShape();//added to interface a way to retrieve each shape
			writer.println(shape.getClass().getSimpleName()); //features that are common amongst all variations of shape objects
			writer.println("\t color:"+shape.getColor().getRed()+","+shape.getColor().getGreen()+","+shape.getColor().getBlue());
			writer.println("\t filled:"+shape.isFill());
			if (shape instanceof Circle){ // feature unique to each shape object type
				writer.println("\t center:"+ ((Circle)shape).getCentre());
				writer.println("\t radius:"+ ((Circle)shape).getRadius());
			}else if(shape instanceof Rectangle){
				writer.println("\t p1:"+ ((Rectangle)shape).getP1());
				writer.println("\t p2:"+((Rectangle)shape).getP2());
			}else if(shape instanceof Squiggle){
				writer.println("\t points");
				for (Point point : ((Squiggle)shape).getPoints()){
					writer.println("\t \t point:"+point);
				}
				writer.println("\t end points");
			}else{
				//nothing occurs
			}
			writer.println("End"+shape.getClass().getSimpleName());

		}
		writer.println("End Paint Save File");
	}
	public void paintComponent(Graphics g) {
        super.paintComponent(g); //paint background
        Graphics2D g2d = (Graphics2D) g;		
		for(PaintCommand c: this.commands){
			c.execute(g2d);
		}
		g2d.dispose();
	}
}
